* models of aegis

#+begin_src sql
  CREATE TABLE IF NOT EXISTS aegis_user (
      user_name TEXT UNIQUE,
  	user_title TEXT,
  	user_email TEXT,
  	user_bio TEXT,
  	user_website TEXT,
  	-- to prevent format mismatch we use timestamp for this.
  	user_reg_datetime INTEGER,
  	user_password_hash TEXT,
  	-- should be tinyint.
  	-- 1 - normal user
  	-- 2 - normal user (waiting for approval).
  	-- 3 - normal user (wait for confirmation).
  	-- 4 - admin
      -- 5 - super admin.
  	-- 7 - banned.
  	-- difference between admin & super admin: super admin can remove
  	-- admin status while admin can't.
  	user_status INTEGER,
  );
  CREATE UNIQUE INDEX IF NOT EXISTS idx_aegis_user_user_name
  ON aegis_user (user_name);
  -- for the next two tables (for the keys) the pair `user_name`
  -- and `key_name` together should be unique (i.e. one user
  -- can have multiple keys and multiple user can have (different)
  -- keys that have the same name, but one user can only have
  -- one key with the same name). we will enforce this at the
  -- golang side for now before i find an easy & cheap way to
  -- do this constraint.
  CREATE TABLE IF NOT EXISTS aegis_user_authkey (
      user_name TEXT,
  	key_name TEXT,
  	key_text TEXT,
      FOREIGN KEY (user_name) REFERENCES aegis_user(user_name)
  );
  CREATE INDEX IF NOT EXISTS idx_aegis_user_authkey_user_name
  ON aegis_user_authkey (user_name);
  CREATE TABLE IF NOT EXISTS aegis_user_signkey (
      user_name TEXT,
  	key_name TEXT,
  	key_text TEXT,
  	FOREIGN KEY (user_name) REFERENCES aegis_user(user_name)
  );
  CREATE INDEX IF NOT EXISTS idx_aegis_user_signkey_user_name
  ON aegis_user_signkey (user_name);
  CREATE TABLE IF NOT EXISTS aegis_namespace (
      ns_name TEXT UNIQUE,
  	ns_title TEXT,
  	ns_description TEXT,
  	ns_email TEXT,
  	ns_owner TEXT,
  	ns_reg_datetime INTEGER,
  	-- currently the acl is a json string with the format:
  	--   { "ver": 0,
  	--     "acl": {
  	--       "{username1}": [true, false, true, ...],
  	--       "{username1}": [true, false, true, ...],
  	--       "{username1}": [true, false, true, ...], }
  	--   }
  	-- the "[true, false, true, ...]" part is the 6-tuple described in
  	-- the documentation (acl.org). 
  	ns_acl TEXT,
  	-- should be tinyint.
  	-- 1 - normal (public). 2 - normal (private).
  	ns_status INT
  	FOREIGN KEY (ns_owner) REFERENCES aegis_user(user_name)
  );
  CREATE UNIQUE INDEX IF NOT EXISTS idx_aegis_namespace_ns_name
  ON aegis_namespace (ns_name);
  CREATE TABLE IF NOT EXISTS aegis_repository (
      -- repository type
  	-- 1 - git
  	repo_type INTEGER,
      -- this field is here for the constraint only, but you should
  	-- always kept it as `{namespace}:{name}`.
      repo_fullname TEXT UNIQUE,
  	repo_namespace TEXT,
      repo_name TEXT,
  	repo_description TEXT,
  	repo_owner TEXT,
  	-- access control list
  	repo_acl TEXT,
  	-- status.
  	-- 1 - normal (public). 2 - normal (private).
      -- 4 - archived.
  	repo_status INTEGER
  	-- if this repository is a fork, this would be filled with
  	-- that repository's fields.
  	repo_fork_origin_namespace TEXT
  	repo_fork_origin_name TEXT
  );
  CREATE TABLE IF NOT EXISTS aegis_repo_redirect (
      old_ns TEXT,
      old_name TEXT,
  	new_ns TEXT,
  	new_name TEXT,
  	redirect_timestamp INTEGER
  );

  CREATE TABLE IF NOT EXISTS aegis_issue (
      repo_namespace TEXT,
  	repo_name TEXT,
  	issue_id INTEGER,
  	issue_timestamp INTEGER,
  	issue_author TEXT,
  	issue_title TEXT,
  	issue_content TEXT,
  	-- 1 - opened.  2 - close as solved.  3 - close as discarded.
  	issue_status INTEGER,
  	FOREIGN KEY (repo_namespace, repo_name)
        REFERENCES aegis_repository(repo_namespace, repo_name),
  	FOREIGN KEY (issue_author)
  	  REFERENCES aegis_user(user_name)
  );
  CREATE TABLE IF NOT EXISTS aegis_issue_event (
      issue_abs_id INTEGER,
  	-- 1 - comment.  2 - close as solved.  3 - close as discarded.
  	-- 4 - reopened.
  	issue_event_type INTEGER,
  	issue_event_time INTEGER,
  	issue_event_author TEXT,
  	issue_event_content TEXT,
      FOREIGN KEY (issue_abs_id) REFERENCES aegis_issue(rowid)
  );
#+end_src

